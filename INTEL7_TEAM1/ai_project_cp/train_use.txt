사용법
train.py: 학습하는 코드
infer.py: 추론하는 코드
utils.pt: 공용함수 코드 인데 고칠 것을 아마 없을 듯
dataset/dataloader.py: 현재 coco데이터셋을 train.py로 전송하기 위한 코드 이것도 고칠 것은 없을 듯
image_class.py: 쓸일 없음
models/vit_ditection.py: 모델 정의 하는 부분 오류가 있다던가 하면 gpt 써서 고치면 됨

datasets 폴더안에 coco 데이터셋을 저장해 뒀음
다른 데이터셋을 사용할 경우에 datasets말고 다른 것으로 바꿔 줘도 됨
다른 coco데이터셋이 아닐 경우엔 train.py, dataloader.py, infer.py를 gpt사용해서 그 데이터셋에 맞게 바꿔달라고 하면 될거임

현재 모델 사용 방법
train.py를 보면 하이퍼파라미터 및 설정 부분이 있음
train_annotations_file: json파일 경로를 넣어주면 됨
train_dir: 데이터셋이 있는 경로 지금 같은경우엔 train파일 안에 이미지와 json파일이 같이 있음
val_annotations_file, val_dir: 위의 경우와 같음

파라미터들에 주석 달아놨음 고칠면 안될것들 정리
weight_decay: 이것은 아마 안 고쳐도 괜찮을 거임
num_queries: 현재 300일텐데 300이 최대라고 함

warmup_epochs: lr을 천천히 올려주는 값이라고 하는데 이걸 고쳐야되는진 애매함 각자 판단해서 하면 됨
weight_dict: 주석 달아논 그대로인데 이거는 알아서 고치면 될듯 얼마가 최고인지는 모르겠음

밑에 있는 파라미터 값들로 돌렸을 때의 결과임 
vit_det 모델
1. lr = 1e-4
   batch_size = 16
   num_queires =300
   weight_dict = {"loss_cls": 2.0, "loss_bbox": 1.0, "loss_giou": 1.0}

epoch 150 기준 결과
1. 최종 검증 손실: 0.1826 최종 검증 정확도: 42.73%
